{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PlayerLink PlayerLink is a cross-platform native multiplayer API with a focus on client-side processing.","title":"Home"},{"location":"#playerlink","text":"PlayerLink is a cross-platform native multiplayer API with a focus on client-side processing.","title":"PlayerLink"},{"location":"Classes/","text":"Classes class Client struct DFHValues class GameRoom class GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. class Logger struct Message struct Player class SHA256 class ServerSocket class Socket Lowest socket implementation. This class will be used by top level socket implementations. class SocketException Socket Exception class used for socket errors. class TCPServer TCPServer class based on Socket Class. Uses TCP communication and also functions as a server to listen and monitor socket connections. class TCPSocket TCPSocket Class extends the base socket class Updated on 24 November 2020 at 20:54:36 UTC","title":"Classes"},{"location":"Classes/#classes","text":"class Client struct DFHValues class GameRoom class GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. class Logger struct Message struct Player class SHA256 class ServerSocket class Socket Lowest socket implementation. This class will be used by top level socket implementations. class SocketException Socket Exception class used for socket errors. class TCPServer TCPServer class based on Socket Class. Uses TCP communication and also functions as a server to listen and monitor socket connections. class TCPSocket TCPSocket Class extends the base socket class Updated on 24 November 2020 at 20:54:36 UTC","title":"Classes"},{"location":"Classes/classClient/","text":"Client Public Functions Name Client (int playerID, sockaddr_in sockaddrIn) Public Functions Documentation function Client Client( int playerID, sockaddr_in sockaddrIn ) Parameters : playerID A unique ID for the player sockaddrIn SockAddr information for the client Constructs a Client Type Updated on 24 November 2020 at 20:54:36 UTC","title":"Client"},{"location":"Classes/classClient/#client","text":"","title":"Client"},{"location":"Classes/classClient/#public-functions","text":"Name Client (int playerID, sockaddr_in sockaddrIn)","title":"Public Functions"},{"location":"Classes/classClient/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classClient/#function-client","text":"Client( int playerID, sockaddr_in sockaddrIn ) Parameters : playerID A unique ID for the player sockaddrIn SockAddr information for the client Constructs a Client Type Updated on 24 November 2020 at 20:54:36 UTC","title":"function Client"},{"location":"Classes/classGameRoom/","text":"GameRoom More... #include <GameRoom.h> Public Functions Name void broadcast (char * message) Detailed Description class GameRoom; A GameRoom is a class which holds all players in a game Public Functions Documentation function broadcast void broadcast( char * message ) Parameters : message Broadcasts a message to all participants of a room Updated on 24 November 2020 at 20:54:36 UTC","title":"GameRoom"},{"location":"Classes/classGameRoom/#gameroom","text":"More... #include <GameRoom.h>","title":"GameRoom"},{"location":"Classes/classGameRoom/#public-functions","text":"Name void broadcast (char * message)","title":"Public Functions"},{"location":"Classes/classGameRoom/#detailed-description","text":"class GameRoom; A GameRoom is a class which holds all players in a game","title":"Detailed Description"},{"location":"Classes/classGameRoom/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classGameRoom/#function-broadcast","text":"void broadcast( char * message ) Parameters : message Broadcasts a message to all participants of a room Updated on 24 November 2020 at 20:54:36 UTC","title":"function broadcast"},{"location":"Classes/classGameServer/","text":"GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. #include <GameServer.h> Public Functions Name GameServer () Constructs a GameServer . ~GameServer () void start (std::string name) Starts the GameServer . Public Functions Documentation function GameServer GameServer() Constructs a GameServer . Return : function ~GameServer ~GameServer() function start void start( std::string name ) Starts the GameServer . Parameters : name Updated on 24 November 2020 at 20:54:36 UTC","title":"GameServer"},{"location":"Classes/classGameServer/#gameserver","text":"A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. #include <GameServer.h>","title":"GameServer"},{"location":"Classes/classGameServer/#public-functions","text":"Name GameServer () Constructs a GameServer . ~GameServer () void start (std::string name) Starts the GameServer .","title":"Public Functions"},{"location":"Classes/classGameServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classGameServer/#function-gameserver","text":"GameServer() Constructs a GameServer . Return :","title":"function GameServer"},{"location":"Classes/classGameServer/#function-gameserver_1","text":"~GameServer()","title":"function ~GameServer"},{"location":"Classes/classGameServer/#function-start","text":"void start( std::string name ) Starts the GameServer . Parameters : name Updated on 24 November 2020 at 20:54:36 UTC","title":"function start"},{"location":"Classes/classLogger/","text":"Logger Public Functions Name Logger ( Logger & otherLogger) void operator= (const Logger & ) void log (LogSeverity severity, std::string message) Logger * getLogger () Public Functions Documentation function Logger Logger( Logger & otherLogger ) Singleton Class should not be cloneable function operator= void operator=( const Logger & ) Singleton classes must not be assignable function log void log( LogSeverity severity, std::string message ) function getLogger static Logger * getLogger() Updated on 24 November 2020 at 20:54:36 UTC","title":"Logger"},{"location":"Classes/classLogger/#logger","text":"","title":"Logger"},{"location":"Classes/classLogger/#public-functions","text":"Name Logger ( Logger & otherLogger) void operator= (const Logger & ) void log (LogSeverity severity, std::string message) Logger * getLogger ()","title":"Public Functions"},{"location":"Classes/classLogger/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classLogger/#function-logger","text":"Logger( Logger & otherLogger ) Singleton Class should not be cloneable","title":"function Logger"},{"location":"Classes/classLogger/#function-operator","text":"void operator=( const Logger & ) Singleton classes must not be assignable","title":"function operator="},{"location":"Classes/classLogger/#function-log","text":"void log( LogSeverity severity, std::string message )","title":"function log"},{"location":"Classes/classLogger/#function-getlogger","text":"static Logger * getLogger() Updated on 24 November 2020 at 20:54:36 UTC","title":"function getLogger"},{"location":"Classes/classSHA256/","text":"SHA256 Protected Types Name typedef unsigned char uint8 typedef unsigned int uint32 typedef unsigned long long uint64 Public Functions Name void init () void update (const unsigned char * message, unsigned int len) void final (unsigned char * digest) Protected Functions Name void transform (const unsigned char * message, unsigned int block_nb) Public Attributes Name const unsigned int DIGEST_SIZE Protected Attributes Name const uint32 sha256_k const unsigned int SHA224_256_BLOCK_SIZE unsigned int m_tot_len unsigned int m_len unsigned char m_block uint32 m_h Protected Types Documentation typedef uint8 typedef unsigned char SHA256::uint8; typedef uint32 typedef unsigned int SHA256::uint32; typedef uint64 typedef unsigned long long SHA256::uint64; Public Functions Documentation function init void init() function update void update( const unsigned char * message, unsigned int len ) function final void final( unsigned char * digest ) Protected Functions Documentation function transform void transform( const unsigned char * message, unsigned int block_nb ) Public Attributes Documentation variable DIGEST_SIZE static const unsigned int DIGEST_SIZE = ( 256 / 8); Protected Attributes Documentation variable sha256_k static const uint32 sha256_k = {0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2}; variable SHA224_256_BLOCK_SIZE static const unsigned int SHA224_256_BLOCK_SIZE = (512/8); variable m_tot_len unsigned int m_tot_len; variable m_len unsigned int m_len; variable m_block unsigned char m_block; variable m_h uint32 m_h; Updated on 24 November 2020 at 20:54:36 UTC","title":"SHA256"},{"location":"Classes/classSHA256/#sha256","text":"","title":"SHA256"},{"location":"Classes/classSHA256/#protected-types","text":"Name typedef unsigned char uint8 typedef unsigned int uint32 typedef unsigned long long uint64","title":"Protected Types"},{"location":"Classes/classSHA256/#public-functions","text":"Name void init () void update (const unsigned char * message, unsigned int len) void final (unsigned char * digest)","title":"Public Functions"},{"location":"Classes/classSHA256/#protected-functions","text":"Name void transform (const unsigned char * message, unsigned int block_nb)","title":"Protected Functions"},{"location":"Classes/classSHA256/#public-attributes","text":"Name const unsigned int DIGEST_SIZE","title":"Public Attributes"},{"location":"Classes/classSHA256/#protected-attributes","text":"Name const uint32 sha256_k const unsigned int SHA224_256_BLOCK_SIZE unsigned int m_tot_len unsigned int m_len unsigned char m_block uint32 m_h","title":"Protected Attributes"},{"location":"Classes/classSHA256/#protected-types-documentation","text":"","title":"Protected Types Documentation"},{"location":"Classes/classSHA256/#typedef-uint8","text":"typedef unsigned char SHA256::uint8;","title":"typedef uint8"},{"location":"Classes/classSHA256/#typedef-uint32","text":"typedef unsigned int SHA256::uint32;","title":"typedef uint32"},{"location":"Classes/classSHA256/#typedef-uint64","text":"typedef unsigned long long SHA256::uint64;","title":"typedef uint64"},{"location":"Classes/classSHA256/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classSHA256/#function-init","text":"void init()","title":"function init"},{"location":"Classes/classSHA256/#function-update","text":"void update( const unsigned char * message, unsigned int len )","title":"function update"},{"location":"Classes/classSHA256/#function-final","text":"void final( unsigned char * digest )","title":"function final"},{"location":"Classes/classSHA256/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Classes/classSHA256/#function-transform","text":"void transform( const unsigned char * message, unsigned int block_nb )","title":"function transform"},{"location":"Classes/classSHA256/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/classSHA256/#variable-digest_size","text":"static const unsigned int DIGEST_SIZE = ( 256 / 8);","title":"variable DIGEST_SIZE"},{"location":"Classes/classSHA256/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Classes/classSHA256/#variable-sha256_k","text":"static const uint32 sha256_k = {0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};","title":"variable sha256_k"},{"location":"Classes/classSHA256/#variable-sha224_256_block_size","text":"static const unsigned int SHA224_256_BLOCK_SIZE = (512/8);","title":"variable SHA224_256_BLOCK_SIZE"},{"location":"Classes/classSHA256/#variable-m_tot_len","text":"unsigned int m_tot_len;","title":"variable m_tot_len"},{"location":"Classes/classSHA256/#variable-m_len","text":"unsigned int m_len;","title":"variable m_len"},{"location":"Classes/classSHA256/#variable-m_block","text":"unsigned char m_block;","title":"variable m_block"},{"location":"Classes/classSHA256/#variable-m_h","text":"uint32 m_h; Updated on 24 November 2020 at 20:54:36 UTC","title":"variable m_h"},{"location":"Classes/classServerSocket/","text":"ServerSocket Public Functions Name ServerSocket (Protocols protocol, int port) ServerSocket (Protocols protocol) Public Functions Documentation function ServerSocket ServerSocket( Protocols protocol, int port ) Parameters : protocol The Stream Protocol port The Port that the client is expected to connect to Constructs a ServerSocket with a specified listening port function ServerSocket ServerSocket( Protocols protocol ) Parameters : protocol The Stream Protocol Constructs a ServerSocket Updated on 24 November 2020 at 20:54:36 UTC","title":"ServerSocket"},{"location":"Classes/classServerSocket/#serversocket","text":"","title":"ServerSocket"},{"location":"Classes/classServerSocket/#public-functions","text":"Name ServerSocket (Protocols protocol, int port) ServerSocket (Protocols protocol)","title":"Public Functions"},{"location":"Classes/classServerSocket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classServerSocket/#function-serversocket","text":"ServerSocket( Protocols protocol, int port ) Parameters : protocol The Stream Protocol port The Port that the client is expected to connect to Constructs a ServerSocket with a specified listening port","title":"function ServerSocket"},{"location":"Classes/classServerSocket/#function-serversocket_1","text":"ServerSocket( Protocols protocol ) Parameters : protocol The Stream Protocol Constructs a ServerSocket Updated on 24 November 2020 at 20:54:36 UTC","title":"function ServerSocket"},{"location":"Classes/classSocket/","text":"Socket Lowest socket implementation. This class will be used by top level socket implementations. #include <Socket.h> Inherited by TCPServer , TCPSocket Public Functions Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Public Functions Documentation function Socket Socket( int family, int type, int flag ) Constructs a Socket object. Parameters : family Address Family. type The type specification for the new socket flag The protocol used for data transmission Return : If no error occurs, socket returns a descriptor referencing the new socket. Otherwise, a value of -1 function Socket explicit Socket( int fd ) function getAddress std::string getAddress() const Return : Gets the address of the remote device function getPort uint32_t getPort() const Return : The port number used for this connection function getSocketDescriptor int getSocketDescriptor() const Return : The socket descriptor used for this socket function close void close() Closes the connection. function isClosed bool isClosed() Return : true if the socket connection has been closed or false if it is still open function setBlocking bool setBlocking( bool swtch ) Allows you to set the blocking mode for this file descriptor. Parameters : swtch Sets the blocking value Return : The result of the blocking, True if blocking was successful or false if there was an issue with changing the blocking status function getLastError int getLastError() Return : The last error number Protected Attributes Documentation variable mSocketFD int mSocketFD; File Descriptor for this socket instance. variable socketIsClosed bool socketIsClosed; Flag if socket is open or closed. variable isBlocked bool isBlocked; Boolean to determine if blocking is enabled on this socket instance. Updated on 24 November 2020 at 20:54:36 UTC","title":"Socket"},{"location":"Classes/classSocket/#socket","text":"Lowest socket implementation. This class will be used by top level socket implementations. #include <Socket.h> Inherited by TCPServer , TCPSocket","title":"Socket"},{"location":"Classes/classSocket/#public-functions","text":"Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError ()","title":"Public Functions"},{"location":"Classes/classSocket/#protected-attributes","text":"Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Protected Attributes"},{"location":"Classes/classSocket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classSocket/#function-socket","text":"Socket( int family, int type, int flag ) Constructs a Socket object. Parameters : family Address Family. type The type specification for the new socket flag The protocol used for data transmission Return : If no error occurs, socket returns a descriptor referencing the new socket. Otherwise, a value of -1","title":"function Socket"},{"location":"Classes/classSocket/#function-socket_1","text":"explicit Socket( int fd )","title":"function Socket"},{"location":"Classes/classSocket/#function-getaddress","text":"std::string getAddress() const Return : Gets the address of the remote device","title":"function getAddress"},{"location":"Classes/classSocket/#function-getport","text":"uint32_t getPort() const Return : The port number used for this connection","title":"function getPort"},{"location":"Classes/classSocket/#function-getsocketdescriptor","text":"int getSocketDescriptor() const Return : The socket descriptor used for this socket","title":"function getSocketDescriptor"},{"location":"Classes/classSocket/#function-close","text":"void close() Closes the connection.","title":"function close"},{"location":"Classes/classSocket/#function-isclosed","text":"bool isClosed() Return : true if the socket connection has been closed or false if it is still open","title":"function isClosed"},{"location":"Classes/classSocket/#function-setblocking","text":"bool setBlocking( bool swtch ) Allows you to set the blocking mode for this file descriptor. Parameters : swtch Sets the blocking value Return : The result of the blocking, True if blocking was successful or false if there was an issue with changing the blocking status","title":"function setBlocking"},{"location":"Classes/classSocket/#function-getlasterror","text":"int getLastError() Return : The last error number","title":"function getLastError"},{"location":"Classes/classSocket/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Classes/classSocket/#variable-msocketfd","text":"int mSocketFD; File Descriptor for this socket instance.","title":"variable mSocketFD"},{"location":"Classes/classSocket/#variable-socketisclosed","text":"bool socketIsClosed; Flag if socket is open or closed.","title":"variable socketIsClosed"},{"location":"Classes/classSocket/#variable-isblocked","text":"bool isBlocked; Boolean to determine if blocking is enabled on this socket instance. Updated on 24 November 2020 at 20:54:36 UTC","title":"variable isBlocked"},{"location":"Classes/classSocketException/","text":"SocketException Socket Exception class used for socket errors. #include <SocketException.h> Inherits from exception Public Functions Name SocketException (const std::string & message) Creates a SocketException . ~SocketException () const char * what () const Public Functions Documentation function SocketException SocketException( const std::string & message ) Creates a SocketException . Parameters : message A description of the error Return : function ~SocketException ~SocketException() function what const char * what() const Updated on 24 November 2020 at 20:54:36 UTC","title":"SocketException"},{"location":"Classes/classSocketException/#socketexception","text":"Socket Exception class used for socket errors. #include <SocketException.h> Inherits from exception","title":"SocketException"},{"location":"Classes/classSocketException/#public-functions","text":"Name SocketException (const std::string & message) Creates a SocketException . ~SocketException () const char * what () const","title":"Public Functions"},{"location":"Classes/classSocketException/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classSocketException/#function-socketexception","text":"SocketException( const std::string & message ) Creates a SocketException . Parameters : message A description of the error Return :","title":"function SocketException"},{"location":"Classes/classSocketException/#function-socketexception_1","text":"~SocketException()","title":"function ~SocketException"},{"location":"Classes/classSocketException/#function-what","text":"const char * what() const Updated on 24 November 2020 at 20:54:36 UTC","title":"function what"},{"location":"Classes/classTCPServer/","text":"TCPServer TCPServer class based on Socket Class. Uses TCP communication and also functions as a server to listen and monitor socket connections. #include <TCPServer.h> Inherits from Socket Public Functions Name TCPServer () Constructs a TCPServer object. void listen (std::string port, int backlog =5) Listens to incoming bytes on a specified port. TCPSocket accept () Method to accept incomming connection request. void monitorSocket ( TCPSocket & fd) Monitors the provided socket. void unmonitor ( TCPSocket & fd) Stops monitoring the provided socket. std::vector< TCPSocket > getSocketEvents (int timeout =10000) Gets the socket Events. Additional inherited members Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Public Functions Documentation function TCPServer TCPServer() Constructs a TCPServer object. Return : function listen void listen( std::string port, int backlog =5 ) Listens to incoming bytes on a specified port. Parameters : port The port you wish to monitor backlog function accept TCPSocket accept() Method to accept incomming connection request. Return : TCPSocket Object used to hold information and methods to send/recieve information from them function monitorSocket void monitorSocket( TCPSocket & fd ) Monitors the provided socket. Parameters : fd The File Descriptor for the socket you want to monitor function unmonitor void unmonitor( TCPSocket & fd ) Stops monitoring the provided socket. Parameters : fd The File Descriptor for the socket you no longer want to monitor function getSocketEvents std::vector< TCPSocket > getSocketEvents( int timeout =10000 ) Gets the socket Events. Parameters : timeout Return : SocketEvents in a vector Updated on 24 November 2020 at 20:54:36 UTC","title":"TCPServer"},{"location":"Classes/classTCPServer/#tcpserver","text":"TCPServer class based on Socket Class. Uses TCP communication and also functions as a server to listen and monitor socket connections. #include <TCPServer.h> Inherits from Socket","title":"TCPServer"},{"location":"Classes/classTCPServer/#public-functions","text":"Name TCPServer () Constructs a TCPServer object. void listen (std::string port, int backlog =5) Listens to incoming bytes on a specified port. TCPSocket accept () Method to accept incomming connection request. void monitorSocket ( TCPSocket & fd) Monitors the provided socket. void unmonitor ( TCPSocket & fd) Stops monitoring the provided socket. std::vector< TCPSocket > getSocketEvents (int timeout =10000) Gets the socket Events.","title":"Public Functions"},{"location":"Classes/classTCPServer/#additional-inherited-members","text":"Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Additional inherited members"},{"location":"Classes/classTCPServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classTCPServer/#function-tcpserver","text":"TCPServer() Constructs a TCPServer object. Return :","title":"function TCPServer"},{"location":"Classes/classTCPServer/#function-listen","text":"void listen( std::string port, int backlog =5 ) Listens to incoming bytes on a specified port. Parameters : port The port you wish to monitor backlog","title":"function listen"},{"location":"Classes/classTCPServer/#function-accept","text":"TCPSocket accept() Method to accept incomming connection request. Return : TCPSocket Object used to hold information and methods to send/recieve information from them","title":"function accept"},{"location":"Classes/classTCPServer/#function-monitorsocket","text":"void monitorSocket( TCPSocket & fd ) Monitors the provided socket. Parameters : fd The File Descriptor for the socket you want to monitor","title":"function monitorSocket"},{"location":"Classes/classTCPServer/#function-unmonitor","text":"void unmonitor( TCPSocket & fd ) Stops monitoring the provided socket. Parameters : fd The File Descriptor for the socket you no longer want to monitor","title":"function unmonitor"},{"location":"Classes/classTCPServer/#function-getsocketevents","text":"std::vector< TCPSocket > getSocketEvents( int timeout =10000 ) Gets the socket Events. Parameters : timeout Return : SocketEvents in a vector Updated on 24 November 2020 at 20:54:36 UTC","title":"function getSocketEvents"},{"location":"Classes/classTCPSocket/","text":"TCPSocket TCPSocket Class extends the base socket class #include <tcpsocket.h> Inherits from Socket Public Functions Name TCPSocket (int fd) TCPSocket () bool connect (std::string address, std::string port) Connects to an address and port. bool connectWithTimeout (std::string address, std::string port, int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Connects to an address and port with a timeout. bool canReceive (int timeout =10000) Checks if the remote machine can recieve. size_t recieve (void * buffer, size_t bufferLength) size_t recieveAll (void * buffer, size_t bufferLength) unsigned char * recieveBytes () Recieves bytes from the remote. bool setRecvTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) size_t send (void const * buffer, size_t bufferLength) size_t sendAll (void const * buffer, size_t bufferLength) bool sendBytes (unsigned char * message) Sends bytes to remote. bool setSendTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Additional inherited members Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Public Functions Documentation function TCPSocket explicit TCPSocket( int fd ) function TCPSocket explicit TCPSocket() function connect bool connect( std::string address, std::string port ) Connects to an address and port. Parameters : address The destination address port The destination port Return : True if connection was successful and false if there was a problem function connectWithTimeout bool connectWithTimeout( std::string address, std::string port, int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS ) Connects to an address and port with a timeout. Parameters : address The destination address port The destination port seconds The number of seconds to wait for a reply microseconds The number of microseconds to wait for a reply Return : True if connection was successful and false if there was a problem function canReceive bool canReceive( int timeout =10000 ) Checks if the remote machine can recieve. Parameters : timeout The number of microseconds to wait before returning false Return : True if remote is able to recieve packets and false if it can't or does not respond function recieve size_t recieve( void * buffer, size_t bufferLength ) function recieveAll size_t recieveAll( void * buffer, size_t bufferLength ) function recieveBytes unsigned char * recieveBytes() Recieves bytes from the remote. Return : an char* type used to hold incoming bytes function setRecvTimeout bool setRecvTimeout( int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS ) function send size_t send( void const * buffer, size_t bufferLength ) function sendAll size_t sendAll( void const * buffer, size_t bufferLength ) function sendBytes bool sendBytes( unsigned char * message ) Sends bytes to remote. Parameters : message The bytes in a unsigned char* Return : True if message was recieved successfully function setSendTimeout bool setSendTimeout( int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS ) Updated on 24 November 2020 at 20:54:36 UTC","title":"TCPSocket"},{"location":"Classes/classTCPSocket/#tcpsocket","text":"TCPSocket Class extends the base socket class #include <tcpsocket.h> Inherits from Socket","title":"TCPSocket"},{"location":"Classes/classTCPSocket/#public-functions","text":"Name TCPSocket (int fd) TCPSocket () bool connect (std::string address, std::string port) Connects to an address and port. bool connectWithTimeout (std::string address, std::string port, int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Connects to an address and port with a timeout. bool canReceive (int timeout =10000) Checks if the remote machine can recieve. size_t recieve (void * buffer, size_t bufferLength) size_t recieveAll (void * buffer, size_t bufferLength) unsigned char * recieveBytes () Recieves bytes from the remote. bool setRecvTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) size_t send (void const * buffer, size_t bufferLength) size_t sendAll (void const * buffer, size_t bufferLength) bool sendBytes (unsigned char * message) Sends bytes to remote. bool setSendTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS)","title":"Public Functions"},{"location":"Classes/classTCPSocket/#additional-inherited-members","text":"Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Additional inherited members"},{"location":"Classes/classTCPSocket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classTCPSocket/#function-tcpsocket","text":"explicit TCPSocket( int fd )","title":"function TCPSocket"},{"location":"Classes/classTCPSocket/#function-tcpsocket_1","text":"explicit TCPSocket()","title":"function TCPSocket"},{"location":"Classes/classTCPSocket/#function-connect","text":"bool connect( std::string address, std::string port ) Connects to an address and port. Parameters : address The destination address port The destination port Return : True if connection was successful and false if there was a problem","title":"function connect"},{"location":"Classes/classTCPSocket/#function-connectwithtimeout","text":"bool connectWithTimeout( std::string address, std::string port, int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS ) Connects to an address and port with a timeout. Parameters : address The destination address port The destination port seconds The number of seconds to wait for a reply microseconds The number of microseconds to wait for a reply Return : True if connection was successful and false if there was a problem","title":"function connectWithTimeout"},{"location":"Classes/classTCPSocket/#function-canreceive","text":"bool canReceive( int timeout =10000 ) Checks if the remote machine can recieve. Parameters : timeout The number of microseconds to wait before returning false Return : True if remote is able to recieve packets and false if it can't or does not respond","title":"function canReceive"},{"location":"Classes/classTCPSocket/#function-recieve","text":"size_t recieve( void * buffer, size_t bufferLength )","title":"function recieve"},{"location":"Classes/classTCPSocket/#function-recieveall","text":"size_t recieveAll( void * buffer, size_t bufferLength )","title":"function recieveAll"},{"location":"Classes/classTCPSocket/#function-recievebytes","text":"unsigned char * recieveBytes() Recieves bytes from the remote. Return : an char* type used to hold incoming bytes","title":"function recieveBytes"},{"location":"Classes/classTCPSocket/#function-setrecvtimeout","text":"bool setRecvTimeout( int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS )","title":"function setRecvTimeout"},{"location":"Classes/classTCPSocket/#function-send","text":"size_t send( void const * buffer, size_t bufferLength )","title":"function send"},{"location":"Classes/classTCPSocket/#function-sendall","text":"size_t sendAll( void const * buffer, size_t bufferLength )","title":"function sendAll"},{"location":"Classes/classTCPSocket/#function-sendbytes","text":"bool sendBytes( unsigned char * message ) Sends bytes to remote. Parameters : message The bytes in a unsigned char* Return : True if message was recieved successfully","title":"function sendBytes"},{"location":"Classes/classTCPSocket/#function-setsendtimeout","text":"bool setSendTimeout( int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS ) Updated on 24 November 2020 at 20:54:36 UTC","title":"function setSendTimeout"},{"location":"Classes/structDFHValues/","text":"DFHValues More... Public Attributes Name unsigned long commonPrime unsigned long secret int baseG Detailed Description struct DFHValues; Diffie Hellman Key Exchange WIP Public Attributes Documentation variable commonPrime unsigned long commonPrime; variable secret unsigned long secret; variable baseG int baseG; Updated on 24 November 2020 at 20:54:36 UTC","title":"DFHValues"},{"location":"Classes/structDFHValues/#dfhvalues","text":"More...","title":"DFHValues"},{"location":"Classes/structDFHValues/#public-attributes","text":"Name unsigned long commonPrime unsigned long secret int baseG","title":"Public Attributes"},{"location":"Classes/structDFHValues/#detailed-description","text":"struct DFHValues; Diffie Hellman Key Exchange WIP","title":"Detailed Description"},{"location":"Classes/structDFHValues/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structDFHValues/#variable-commonprime","text":"unsigned long commonPrime;","title":"variable commonPrime"},{"location":"Classes/structDFHValues/#variable-secret","text":"unsigned long secret;","title":"variable secret"},{"location":"Classes/structDFHValues/#variable-baseg","text":"int baseG; Updated on 24 November 2020 at 20:54:36 UTC","title":"variable baseG"},{"location":"Classes/structMessage/","text":"Message Public Functions Name Message () Message (int sock_id, unsigned char * bytes) Public Attributes Name int mSockID unsigned char * mBytes Public Functions Documentation function Message inline Message() function Message inline Message( int sock_id, unsigned char * bytes ) Public Attributes Documentation variable mSockID int mSockID; variable mBytes unsigned char * mBytes; Updated on 24 November 2020 at 20:54:36 UTC","title":"Message"},{"location":"Classes/structMessage/#message","text":"","title":"Message"},{"location":"Classes/structMessage/#public-functions","text":"Name Message () Message (int sock_id, unsigned char * bytes)","title":"Public Functions"},{"location":"Classes/structMessage/#public-attributes","text":"Name int mSockID unsigned char * mBytes","title":"Public Attributes"},{"location":"Classes/structMessage/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/structMessage/#function-message","text":"inline Message()","title":"function Message"},{"location":"Classes/structMessage/#function-message_1","text":"inline Message( int sock_id, unsigned char * bytes )","title":"function Message"},{"location":"Classes/structMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structMessage/#variable-msockid","text":"int mSockID;","title":"variable mSockID"},{"location":"Classes/structMessage/#variable-mbytes","text":"unsigned char * mBytes; Updated on 24 November 2020 at 20:54:36 UTC","title":"variable mBytes"},{"location":"Classes/structPlayer/","text":"Player Public Functions Name Player () Player (std::string id, std::string userName, std::string ip) Public Attributes Name std::string mID std::string mUserName std::string mIP Public Functions Documentation function Player inline Player() function Player inline Player( std::string id, std::string userName, std::string ip ) Public Attributes Documentation variable mID std::string mID; variable mUserName std::string mUserName; variable mIP std::string mIP; Updated on 24 November 2020 at 20:54:36 UTC","title":"Player"},{"location":"Classes/structPlayer/#player","text":"","title":"Player"},{"location":"Classes/structPlayer/#public-functions","text":"Name Player () Player (std::string id, std::string userName, std::string ip)","title":"Public Functions"},{"location":"Classes/structPlayer/#public-attributes","text":"Name std::string mID std::string mUserName std::string mIP","title":"Public Attributes"},{"location":"Classes/structPlayer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/structPlayer/#function-player","text":"inline Player()","title":"function Player"},{"location":"Classes/structPlayer/#function-player_1","text":"inline Player( std::string id, std::string userName, std::string ip )","title":"function Player"},{"location":"Classes/structPlayer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structPlayer/#variable-mid","text":"std::string mID;","title":"variable mID"},{"location":"Classes/structPlayer/#variable-musername","text":"std::string mUserName;","title":"variable mUserName"},{"location":"Classes/structPlayer/#variable-mip","text":"std::string mIP; Updated on 24 November 2020 at 20:54:36 UTC","title":"variable mIP"},{"location":"Examples/","text":"Examples Updated on 24 November 2020 at 20:54:36 UTC","title":"Examples"},{"location":"Examples/#examples","text":"Updated on 24 November 2020 at 20:54:36 UTC","title":"Examples"},{"location":"Modules/","text":"Modules Updated on 24 November 2020 at 20:54:36 UTC","title":"Modules"},{"location":"Modules/#modules","text":"Updated on 24 November 2020 at 20:54:36 UTC","title":"Modules"},{"location":"Namespaces/","text":"Namespaces Updated on 24 November 2020 at 20:54:36 UTC","title":"Namespaces"},{"location":"Namespaces/#namespaces","text":"Updated on 24 November 2020 at 20:54:36 UTC","title":"Namespaces"}]}